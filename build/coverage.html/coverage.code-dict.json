{"/home/travis/build/npmtest/node-npmtest-gift/test.js":"/* istanbul instrument in package npmtest_gift */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gift/lib.npmtest_gift.js":"/* istanbul instrument in package npmtest_gift */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gift = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gift = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gift/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gift && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gift */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gift\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gift.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gift.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gift.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gift.__dirname +\n                    '/lib.npmtest_gift.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/index.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var Git, Repo, exec;\n\n  exec = require('child_process').exec;\n\n  Repo = require('./repo');\n\n  module.exports = Git = function(path, bare, git_options) {\n    if (bare == null) {\n      bare = false;\n    }\n    if (git_options == null) {\n      git_options = {\n        maxBuffer: Git.maxBuffer\n      };\n    }\n    return new Repo(path, bare, git_options);\n  };\n\n  Git.maxBuffer = 5000 * 1024;\n\n  Git.init = function(path, bare, callback) {\n    var bash, ref;\n    if (!callback) {\n      ref = [callback, bare], bare = ref[0], callback = ref[1];\n    }\n    if (bare) {\n      bash = \"git init --bare .\";\n    } else {\n      bash = \"git init .\";\n    }\n    return exec(bash, {\n      cwd: path\n    }, function(err, stdout, stderr) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(err, new Repo(path, bare, {\n        maxBuffer: Git.maxBuffer\n      }));\n    });\n  };\n\n  Git.clone = function(repository, path, depth, branch, callback) {\n    var bash;\n    if (depth == null) {\n      depth = 0;\n    }\n    if (branch == null) {\n      branch = null;\n    }\n    if (typeof branch === 'function') {\n      callback = branch;\n      branch = null;\n    }\n    if (typeof depth === 'function') {\n      callback = depth;\n      depth = 0;\n    }\n    bash = \"git clone \\\"\" + repository + \"\\\" \\\"\" + path + \"\\\"\";\n    if (branch !== null && typeof branch === 'string') {\n      bash += \" --branch \\\"\" + branch + \"\\\"\";\n    }\n    if (depth !== 0 && typeof depth === 'number') {\n      bash += \" --depth \\\"\" + depth + \"\\\"\";\n    }\n    return exec(bash, function(err, stdout, stderr) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(err, new Repo(path, false, {\n        maxBuffer: Git.maxBuffer\n      }));\n    });\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/repo.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var Actor, Commit, Config, Diff, Head, Ref, Repo, Status, Tag, Tree, _, cmd, ref;\n\n  _ = require('underscore');\n\n  cmd = require('./git');\n\n  Actor = require('./actor');\n\n  Commit = require('./commit');\n\n  Config = require('./config');\n\n  Tree = require('./tree');\n\n  Diff = require('./diff');\n\n  Tag = require('./tag');\n\n  Status = require('./status');\n\n  ref = require('./ref'), Ref = ref.Ref, Head = ref.Head;\n\n  module.exports = Repo = (function() {\n    function Repo(path, bare, git_options) {\n      this.path = path;\n      this.bare = bare;\n      this.git_options = git_options;\n      if (this.bare) {\n        this.dot_git = this.path;\n      } else {\n        this.dot_git = this.path + \"/.git\";\n      }\n      this.git = cmd(this.path, this.dot_git, this.git_options);\n    }\n\n    Repo.prototype.identity = function(callback) {\n      return this.git(\"config\", {}, [\"user.email\"], (function(_this) {\n        return function(err, stdout) {\n          var email;\n          if (stdout == null) {\n            stdout = '';\n          }\n          if (err) {\n            return callback(err);\n          }\n          email = stdout != null ? stdout.trim() : void 0;\n          return _this.git(\"config\", {}, [\"user.name\"], function(err, stdout) {\n            var name;\n            if (stdout == null) {\n              stdout = '';\n            }\n            if (err) {\n              return callback(err);\n            }\n            name = stdout != null ? stdout.trim() : void 0;\n            return callback(null, new Actor(name, email));\n          });\n        };\n      })(this));\n    };\n\n    Repo.prototype.identify = function(actor, callback) {\n      return this.git(\"config\", {}, [\"user.email\", \"\\\"\" + actor.email + \"\\\"\"], (function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          return _this.git(\"config\", {}, [\"user.name\", \"\\\"\" + actor.name + \"\\\"\"], function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return callback(null);\n          });\n        };\n      })(this));\n    };\n\n    Repo.prototype.commits = function(start, limit, skip, callback) {\n      var options, ref1, ref2, ref3;\n      if (!callback) {\n        ref1 = [callback, skip], skip = ref1[0], callback = ref1[1];\n      }\n      if (!callback) {\n        ref2 = [callback, limit], limit = ref2[0], callback = ref2[1];\n      }\n      if (!callback) {\n        ref3 = [callback, start], start = ref3[0], callback = ref3[1];\n      }\n      if (!callback) {\n        throw new Error(\"a callback is required\");\n      }\n      if (start == null) {\n        start = \"master\";\n      }\n      if (limit == null) {\n        limit = 10;\n      }\n      if (skip == null) {\n        skip = 0;\n      }\n      options = {\n        skip: skip\n      };\n      if (limit !== -1) {\n        options[\"max-count\"] = limit;\n      }\n      return Commit.find_all(this, start, options, callback);\n    };\n\n    Repo.prototype.current_commit_id = function(callback) {\n      return this.git(\"rev-parse HEAD\", {}, [], (function(_this) {\n        return function(err, stdout, stderr) {\n          if (err) {\n            return callback(err);\n          }\n          return callback(null, _.first(stdout.split(\"\\n\")));\n        };\n      })(this));\n    };\n\n    Repo.prototype.current_commit = function(callback) {\n      return this.current_commit_id((function(_this) {\n        return function(err, commit_id) {\n          if (err) {\n            return callback(err);\n          }\n          return Commit.find(_this, commit_id, callback);\n        };\n      })(this));\n    };\n\n    Repo.prototype.tree = function(treeish) {\n      if (treeish == null) {\n        treeish = \"master\";\n      }\n      return new Tree(this, treeish);\n    };\n\n    Repo.prototype.diff = function(commitA, commitB) {\n      var callback, options, paths, ref1, ref2;\n      ref1 = [[], {}], paths = ref1[0], options = ref1[1];\n      if (arguments.length === 3) {\n        callback = arguments[2];\n      } else if (arguments.length === 4) {\n        callback = arguments[3];\n        if (arguments[2] instanceof Array) {\n          paths = arguments[2];\n        } else if (arguments[2] instanceof Object) {\n          options = arguments[2];\n        }\n      } else if (arguments.length === 5) {\n        ref2 = Array.prototype.slice.call(arguments, 2), paths = ref2[0], options = ref2[1], callback = ref2[2];\n      }\n      if (_.isObject(commitA)) {\n        commitA = commitA.id;\n      }\n      if (_.isObject(commitB)) {\n        commitB = commitB.id;\n      }\n      return this.git(\"diff\", options, _.flatten([commitA, commitB, \"--\", paths]), (function(_this) {\n        return function(err, stdout, stderr) {\n          if (err) {\n            return callback(err);\n          }\n          if (_.has(options, 'raw')) {\n            return callback(err, Diff.parse_raw(_this, stdout));\n          } else {\n            return callback(err, Diff.parse(_this, stdout));\n          }\n        };\n      })(this), 'binary');\n    };\n\n    Repo.prototype.remotes = function(callback) {\n      return Ref.find_all(this, \"remote\", Ref, callback);\n    };\n\n    Repo.prototype.remote_list = function(callback) {\n      return this.git.list_remotes(callback);\n    };\n\n    Repo.prototype.remote_add = function(name, url, callback) {\n      return this.git(\"remote\", {}, [\"add\", name, url], function(err, stdout, stderr) {\n        return callback(err);\n      });\n    };\n\n    Repo.prototype.remote_remove = function(name, callback) {\n      return this.git(\"remote\", {}, [\"rm\", name], function(err, stdout, stderr) {\n        return callback(err);\n      });\n    };\n\n    Repo.prototype.remote_add_url = function(name, url, callback) {\n      return this.git(\"remote set-url\", {}, [\"--add\", name, url], function(err, stdout, stderr) {\n        return callback(err);\n      });\n    };\n\n    Repo.prototype.remote_set_url = function(name, url, callback) {\n      return this.git(\"remote set-url\", {}, [name, url], function(err, stdout, stderr) {\n        return callback(err);\n      });\n    };\n\n    Repo.prototype.remote_delete_url = function(name, url, callback) {\n      return this.git(\"remote set-url\", {}, [\"--delete\", name, url], function(err, stdout, stderr) {\n        return callback(err);\n      });\n    };\n\n    Repo.prototype.remote_fetch = function(name, options, callback) {\n      var ref1;\n      if (!callback) {\n        ref1 = [callback, options], options = ref1[0], callback = ref1[1];\n      }\n      return this.git(\"fetch\", options, name, function(err, stdout, stderr) {\n        return callback(err);\n      });\n    };\n\n    Repo.prototype.remote_push = function(name, branch, options, callback) {\n      var args;\n      if (!options && !callback) {\n        callback = branch;\n        args = name;\n        options = {};\n      } else {\n        if (!callback) {\n          callback = options;\n          options = {};\n        }\n        args = [name, branch];\n      }\n      return this.git(\"push\", options, args, function(err, stdout, stderr) {\n        return callback(err);\n      });\n    };\n\n    Repo.prototype.merge = function(name, options, callback) {\n      var ref1;\n      if (!callback) {\n        ref1 = [callback, options], options = ref1[0], callback = ref1[1];\n      }\n      return this.git(\"merge\", options, name, function(err, stdout, stderr) {\n        return callback(err);\n      });\n    };\n\n    Repo.prototype.status = function(options, callback) {\n      var ref1;\n      if (!callback) {\n        ref1 = [callback, options], options = ref1[0], callback = ref1[1];\n      }\n      return Status(this, options, callback);\n    };\n\n    Repo.prototype.ls_files = function(files, options, callback) {\n      var ref1;\n      if (arguments.length === 1) {\n        callback = files;\n        files = null;\n      } else if (arguments.length < 3) {\n        ref1 = [files, options], options = ref1[0], callback = ref1[1];\n        files = null;\n      }\n      if (callback == null) {\n        callback = function() {};\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (files == null) {\n        files = '';\n      }\n      if (_.isString(files)) {\n        files = [files];\n      }\n      return this.git(\"ls-files\", options, _.flatten(['--', files]), (function(_this) {\n        return function(err, stdout, stderr) {\n          if (err) {\n            return callback(err);\n          }\n          return callback(null, _this.parse_lsFiles(stdout, options));\n        };\n      })(this));\n    };\n\n    Repo.prototype.config = function(callback) {\n      return Config(this, callback);\n    };\n\n    Repo.prototype.tags = function(callback) {\n      return Tag.find_all(this, callback);\n    };\n\n    Repo.prototype.create_tag = function(name, options, callback) {\n      var ref1;\n      if (!callback) {\n        ref1 = [callback, options], options = ref1[0], callback = ref1[1];\n      }\n      return this.git(\"tag\", options, [name], callback);\n    };\n\n    Repo.prototype.delete_tag = function(name, callback) {\n      return this.git(\"tag\", {\n        d: name\n      }, callback);\n    };\n\n    Repo.prototype.branches = function(callback) {\n      return Head.find_all(this, callback);\n    };\n\n    Repo.prototype.create_branch = function(name, callback) {\n      return this.git(\"branch\", {}, name, function(err, stdout, stderr) {\n        return callback(err);\n      });\n    };\n\n    Repo.prototype.delete_branch = function(name, callback) {\n      return this.git(\"branch\", {\n        d: true\n      }, name, function(err, stdout, stderr) {\n        return callback(err);\n      });\n    };\n\n    Repo.prototype.branch = function(name, callback) {\n      var ref1;\n      if (!callback) {\n        ref1 = [callback, name], name = ref1[0], callback = ref1[1];\n      }\n      if (!name) {\n        return Head.current(this, callback);\n      } else {\n        return this.branches(function(err, heads) {\n          var head, i, len;\n          if (err) {\n            return callback(err);\n          }\n          for (i = 0, len = heads.length; i < len; i++) {\n            head = heads[i];\n            if (head.name === name) {\n              return callback(null, head);\n            }\n          }\n          return callback(new Error(\"No branch named '\" + name + \"' found\"));\n        });\n      }\n    };\n\n    Repo.prototype.checkout = function(treeish, options, callback) {\n      var ref1;\n      if (!callback) {\n        ref1 = [{}, options], options = ref1[0], callback = ref1[1];\n      }\n      return this.git(\"checkout\", options, treeish, callback);\n    };\n\n    Repo.prototype.clean = function(options, callback) {\n      if (options == null) {\n        options = {};\n      }\n      return this.git(\"clean\", options, callback);\n    };\n\n    Repo.prototype.reset = function(treeish, options, callback) {\n      var ref1, ref2, ref3;\n      if (!callback) {\n        ref1 = [callback, options], options = ref1[0], callback = ref1[1];\n      }\n      if (!callback) {\n        ref2 = [callback, treeish], treeish = ref2[0], callback = ref2[1];\n      }\n      if (typeof treeish === 'object') {\n        ref3 = [options, treeish], treeish = ref3[0], options = ref3[1];\n      }\n      if (treeish == null) {\n        treeish = 'HEAD';\n      }\n      if (options == null) {\n        options = {};\n      }\n      return this.git(\"reset\", options, treeish, callback);\n    };\n\n    Repo.prototype.checkoutFile = function(files, options, callback) {\n      var ref1, ref2, ref3;\n      if (!callback) {\n        ref1 = [callback, options], options = ref1[0], callback = ref1[1];\n      }\n      if (!callback) {\n        ref2 = [callback, files], files = ref2[0], callback = ref2[1];\n      }\n      if (typeof files === 'object') {\n        ref3 = [options, files], files = ref3[0], options = ref3[1];\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (files == null) {\n        files = '.';\n      }\n      if (_.isString(files)) {\n        files = [files];\n      }\n      return this.git(\"checkout\", options, _.flatten(['--', files]), callback);\n    };\n\n    Repo.prototype.commit = function(message, options, callback) {\n      var ref1;\n      if (!callback) {\n        ref1 = [callback, options], options = ref1[0], callback = ref1[1];\n      }\n      if (options == null) {\n        options = {};\n      }\n      options = _.extend(options, {\n        m: \"\\\"\" + message + \"\\\"\"\n      });\n      if (options.author != null) {\n        options.author = \"\\\"\" + options.author + \"\\\"\";\n      }\n      return this.git(\"commit\", options, callback);\n    };\n\n    Repo.prototype.add = function(files, options, callback) {\n      var ref1;\n      if (!callback) {\n        ref1 = [callback, options], options = ref1[0], callback = ref1[1];\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (_.isString(files)) {\n        files = [files];\n      }\n      return this.git(\"add\", options, files, callback);\n    };\n\n    Repo.prototype.remove = function(files, options, callback) {\n      var ref1;\n      if (!callback) {\n        ref1 = [callback, options], options = ref1[0], callback = ref1[1];\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (_.isString(files)) {\n        files = [files];\n      }\n      return this.git(\"rm\", options, files, callback);\n    };\n\n    Repo.prototype.revert = function(sha, callback) {\n      return this.git(\"revert\", {}, sha, callback);\n    };\n\n    Repo.prototype.sync = function(remote_name, branch_name, callback) {\n      var branch, ref1, ref2, ref3, remote;\n      if (typeof callback === \"function\") {\n        ref1 = [remote_name, branch_name], remote = ref1[0], branch = ref1[1];\n      }\n      if (typeof branch_name === \"function\") {\n        ref2 = [\"origin\", remote_name, branch_name], remote = ref2[0], branch = ref2[1], callback = ref2[2];\n      }\n      if (typeof remote_name === \"function\") {\n        ref3 = [\"origin\", \"master\", remote_name], remote = ref3[0], branch = ref3[1], callback = ref3[2];\n      }\n      return this.status((function(_this) {\n        return function(err, status) {\n          if (err) {\n            return callback(err);\n          }\n          return _this.git(\"stash\", {}, [\"save\", \"-u\"], function(err, stdout, stderr) {\n            if (err) {\n              return callback(stderr);\n            }\n            return _this.git(\"pull\", {}, [remote, branch], function(err, stdout, stderr) {\n              if (err) {\n                return callback(stderr);\n              }\n              return _this.git(\"push\", {}, [remote, branch], function(err, stdout, stderr) {\n                if (err) {\n                  return callback(stderr);\n                }\n                if (!(status != null ? status.clean : void 0)) {\n                  return _this.git(\"stash\", {}, [\"pop\"], function(err, stdout, stderr) {\n                    if (err) {\n                      return callback(stderr);\n                    }\n                    return callback(null);\n                  });\n                } else {\n                  return callback(null);\n                }\n              });\n            });\n          });\n        };\n      })(this));\n    };\n\n    Repo.prototype.pull = function(remote_name, branch_name, callback) {\n      var branch, ref1, ref2, ref3, remote;\n      if (typeof callback === \"function\") {\n        ref1 = [remote_name, branch_name], remote = ref1[0], branch = ref1[1];\n      }\n      if (typeof branch_name === \"function\") {\n        ref2 = [\"origin\", remote_name, branch_name], remote = ref2[0], branch = ref2[1], callback = ref2[2];\n      }\n      if (typeof remote_name === \"function\") {\n        ref3 = [\"origin\", \"master\", remote_name], remote = ref3[0], branch = ref3[1], callback = ref3[2];\n      }\n      return this.status((function(_this) {\n        return function(err, status) {\n          if (err) {\n            return callback(err);\n          }\n          return _this.git(\"pull\", {}, [remote, branch], function(err, stdout, stderr) {\n            if (err) {\n              return callback(stderr);\n            }\n            return callback(null);\n          });\n        };\n      })(this));\n    };\n\n    Repo.prototype.parse_lsFiles = function(text, options) {\n      var files, line, lines;\n      files = [];\n      if (_.has(options, 'z')) {\n        lines = text.split(\"\\0\");\n      } else {\n        lines = text.split(\"\\n\");\n      }\n      while (lines.length) {\n        line = lines.shift().split(\" \");\n        files.push(line);\n        while ((lines[0] != null) && !lines[0].length) {\n          lines.shift();\n        }\n      }\n      return files;\n    };\n\n    return Repo;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/git.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var Git, exec, fs, options_to_argv, ref, spawn;\n\n  fs = require('fs');\n\n  ref = require('child_process'), exec = ref.exec, spawn = ref.spawn;\n\n  module.exports = Git = function(git_dir, dot_git, git_options) {\n    var git;\n    git_options || (git_options = {});\n    dot_git || (dot_git = git_dir + \"/.git\");\n    git = function(command, options, args, callback, encoding) {\n      var bash, ref1, ref2;\n      if (!callback) {\n        ref1 = [args, callback], callback = ref1[0], args = ref1[1];\n      }\n      if (!callback) {\n        ref2 = [options, callback], callback = ref2[0], options = ref2[1];\n      }\n      if (options == null) {\n        options = {};\n      }\n      options = options_to_argv(options);\n      options = options.join(\" \");\n      if (args == null) {\n        args = [];\n      }\n      if (args instanceof Array) {\n        args = args.join(\" \");\n      }\n      if (encoding == null) {\n        encoding = 'utf8';\n      }\n      bash = (git_options.bin || Git.bin) + \" \" + command + \" \" + options + \" \" + args;\n      exec(bash, {\n        cwd: git_dir,\n        encoding: encoding,\n        maxBuffer: git_options.maxBuffer || 5000 * 1024\n      }, callback);\n      return bash;\n    };\n    git.cmd = function(command, options, args, callback, encoding) {\n      return git(command, options, args, callback, encoding);\n    };\n    git.streamCmd = function(command, options, args, encoding) {\n      var allargs, process;\n      if (options == null) {\n        options = {};\n      }\n      options = options_to_argv(options);\n      if (args == null) {\n        args = [];\n      }\n      allargs = [command].concat(options).concat(args);\n      if (encoding == null) {\n        encoding = 'utf8';\n      }\n      process = spawn(Git.bin, allargs, {\n        cwd: git_dir,\n        encoding: encoding\n      });\n      return [process.stdout, process.stderr];\n    };\n    git.list_remotes = function(callback) {\n      return fs.readdir(dot_git + \"/refs/remotes\", function(err, files) {\n        return callback(err, files || []);\n      });\n    };\n    git.refs = function(type, options, callback) {\n      var prefix, ref1;\n      if (!callback) {\n        ref1 = [options, callback], callback = ref1[0], options = ref1[1];\n      }\n      prefix = \"refs/\" + type + \"s/\";\n      return git(\"show-ref\", function(err, text) {\n        var i, id, len, line, matches, name, ref2, ref3;\n        if ((err != null ? err.code : void 0) === 1) {\n          err = null;\n        }\n        matches = [];\n        ref2 = (text || \"\").split(\"\\n\");\n        for (i = 0, len = ref2.length; i < len; i++) {\n          line = ref2[i];\n          if (!line) {\n            continue;\n          }\n          ref3 = line.split(' '), id = ref3[0], name = ref3[1];\n          if (name.substr(0, prefix.length) === prefix) {\n            matches.push((name.substr(prefix.length)) + \" \" + id);\n          }\n        }\n        return callback(err, matches.join(\"\\n\"));\n      });\n    };\n    return git;\n  };\n\n  Git.bin = \"git\";\n\n  Git.options_to_argv = options_to_argv = function(options) {\n    var argv, key, val;\n    argv = [];\n    for (key in options) {\n      val = options[key];\n      if (key.length === 1) {\n        if (val === true) {\n          argv.push(\"-\" + key);\n        } else if (val === false) {\n\n        } else {\n          argv.push(\"-\" + key);\n          argv.push(val);\n        }\n      } else {\n        if (val === true) {\n          argv.push(\"--\" + key);\n        } else if (val === false) {\n\n        } else {\n          argv.push(\"--\" + key + \"=\" + val);\n        }\n      }\n    }\n    return argv;\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/actor.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var Actor, crypto;\n\n  crypto = require('crypto');\n\n  module.exports = Actor = (function() {\n    function Actor(name1, email1) {\n      this.name = name1;\n      this.email = email1;\n      if (this.email) {\n        this.hash = crypto.createHash(\"md5\").update(this.email, \"ascii\").digest(\"hex\");\n      }\n    }\n\n    Actor.prototype.toString = function() {\n      return this.name + \" <\" + this.email + \">\";\n    };\n\n    Actor.from_string = function(str) {\n      var email, m, name, ref;\n      if (/<.+>/.test(str)) {\n        ref = /(.*) <(.+?)>/.exec(str), m = ref[0], name = ref[1], email = ref[2];\n        return new Actor(name, email);\n      } else {\n        return new Actor(str, null);\n      }\n    };\n\n    return Actor;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/commit.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var Actor, Commit, Tree, _;\n\n  _ = require('underscore');\n\n  Actor = require('./actor');\n\n  Tree = require('./tree');\n\n  module.exports = Commit = (function() {\n    function Commit(repo1, id1, parents, tree, author1, authored_date1, committer1, committed_date1, gpgsig1, message) {\n      this.repo = repo1;\n      this.id = id1;\n      this.author = author1;\n      this.authored_date = authored_date1;\n      this.committer = committer1;\n      this.committed_date = committed_date1;\n      this.gpgsig = gpgsig1;\n      this.message = message;\n      this.tree = _.memoize((function(_this) {\n        return function() {\n          return new Tree(_this.repo, tree);\n        };\n      })(this));\n      this.parents = _.memoize((function(_this) {\n        return function() {\n          return _.map(parents, function(parent) {\n            return new Commit(_this.repo, parent);\n          });\n        };\n      })(this));\n      this.describe = (function(_this) {\n        return function(refs, first_parent, callback) {\n          var options, parent, ref1, ref2;\n          if (!callback) {\n            ref1 = [callback, first_parent], first_parent = ref1[0], callback = ref1[1];\n          }\n          if (!callback) {\n            ref2 = [callback, refs], refs = ref2[0], callback = ref2[1];\n          }\n          options = {};\n          if (refs === \"all\") {\n            options.all = true;\n          }\n          if (refs === \"tags\") {\n            options.tags = true;\n          }\n          if (!!first_parent) {\n            options.first - (parent = true);\n          }\n          options.long = true;\n          return _this.repo.git(\"describe\", options, _this.id, function(err, stdout, stderr) {\n            if (err) {\n              return callback(err);\n            }\n            return callback(null, stdout.trim());\n          });\n        };\n      })(this);\n    }\n\n    Commit.prototype.toJSON = function() {\n      return {\n        id: this.id,\n        author: this.author,\n        authored_date: this.authored_date,\n        committer: this.committer,\n        committed_date: this.committed_date,\n        message: this.message\n      };\n    };\n\n    Commit.find_all = function(repo, ref, options, callback) {\n      options = _.extend({\n        pretty: \"raw\"\n      }, options);\n      return repo.git(\"rev-list\", options, ref, (function(_this) {\n        return function(err, stdout, stderr) {\n          if (err) {\n            return callback(err);\n          }\n          return callback(null, _this.parse_commits(repo, stdout));\n        };\n      })(this));\n    };\n\n    Commit.find = function(repo, id, callback) {\n      var options;\n      options = {\n        pretty: \"raw\",\n        \"max-count\": 1\n      };\n      return repo.git(\"rev-list\", options, id, (function(_this) {\n        return function(err, stdout, stderr) {\n          if (err) {\n            return callback(err);\n          }\n          return callback(null, _this.parse_commits(repo, stdout)[0]);\n        };\n      })(this));\n    };\n\n    Commit.find_commits = function(repo, ids, callback) {\n      var commits, next;\n      commits = [];\n      next = function(i) {\n        var id;\n        if (id = ids[i]) {\n          return Commit.find(repo, id, function(err, commit) {\n            if (err) {\n              return callback(err);\n            }\n            commits.push(commit);\n            return next(i + 1);\n          });\n        } else {\n          return callback(null, commits);\n        }\n      };\n      return next(0);\n    };\n\n    Commit.parse_commits = function(repo, text) {\n      var author, author_line, authored_date, commits, committed_date, committer, committer_line, encoding, gpgsig, id, lines, message_lines, parents, ref1, ref2, tree;\n      commits = [];\n      lines = text.split(\"\\n\");\n      while (lines.length) {\n        id = _.last(lines.shift().split(\" \"));\n        if (!id) {\n          break;\n        }\n        tree = _.last(lines.shift().split(\" \"));\n        parents = [];\n        while (/^parent/.test(lines[0])) {\n          parents.push(_.last(lines.shift().split(\" \")));\n        }\n        author_line = lines.shift();\n        ref1 = this.actor(author_line), author = ref1[0], authored_date = ref1[1];\n        committer_line = lines.shift();\n        ref2 = this.actor(committer_line), committer = ref2[0], committed_date = ref2[1];\n        gpgsig = [];\n        if (/^gpgsig/.test(lines[0])) {\n          gpgsig.push(lines.shift().replace(/^gpgsig /, ''));\n          while (!/^ -----END PGP SIGNATURE-----$/.test(lines[0])) {\n            gpgsig.push(lines.shift());\n          }\n          gpgsig.push(lines.shift());\n        }\n        while (/^kilnhgcopies/.test(lines[0])) {\n          lines.shift();\n        }\n        while (/^HG:/.test(lines[0])) {\n          lines.shift();\n        }\n        if (/^encoding/.test(lines[0])) {\n          encoding = _.last(lines.shift().split(\" \"));\n        }\n        if (lines.length) {\n          lines.shift();\n        }\n        message_lines = [];\n        while (/^ {4}/.test(lines[0])) {\n          message_lines.push(lines.shift().slice(4));\n        }\n        while ((lines[0] != null) && !lines[0].length) {\n          lines.shift();\n        }\n        commits.push(new Commit(repo, id, parents, tree, author, authored_date, committer, committed_date, gpgsig.join(\"\\n\"), message_lines.join(\"\\n\")));\n      }\n      return commits;\n    };\n\n    Commit.actor = function(line) {\n      var actor, epoch, m, ref1;\n      ref1 = /^.+? (.*) (\\d+) .*$/.exec(line), m = ref1[0], actor = ref1[1], epoch = ref1[2];\n      return [Actor.from_string(actor), new Date(1000 * +epoch)];\n    };\n\n    return Commit;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/tree.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var Blob, Submodule, Tree, _;\n\n  _ = require('underscore');\n\n  Blob = require('./blob');\n\n  Submodule = require('./submodule');\n\n  module.exports = Tree = (function() {\n    function Tree(repo, options) {\n      this.repo = repo;\n      if (_.isString(options)) {\n        this.id = options;\n      } else {\n        this.id = options.id, this.name = options.name, this.mode = options.mode;\n      }\n    }\n\n    Tree.prototype.contents = function(callback) {\n      if (this._contents) {\n        return callback(null, this._contents);\n      }\n      return this.repo.git(\"ls-tree\", {}, this.id, (function(_this) {\n        return function(err, stdout, stderr) {\n          var i, len, line, ref;\n          if (err) {\n            return callback(err);\n          }\n          _this._contents = [];\n          ref = stdout.split(\"\\n\");\n          for (i = 0, len = ref.length; i < len; i++) {\n            line = ref[i];\n            if (line) {\n              _this._contents.push(_this.content_from_string(line));\n            }\n          }\n          return callback(null, _this._contents);\n        };\n      })(this), 'binary');\n    };\n\n    Tree.prototype.blobs = function(callback) {\n      return this.contents(function(err, children) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, _.filter(children, function(child) {\n          return child instanceof Blob;\n        }));\n      });\n    };\n\n    Tree.prototype.trees = function(callback) {\n      return this.contents(function(err, children) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, _.filter(children, function(child) {\n          return child instanceof Tree;\n        }));\n      });\n    };\n\n    Tree.prototype.find = function(file, callback) {\n      var dir, ref, rest;\n      if (/\\//.test(file)) {\n        ref = file.split(\"/\", 2), dir = ref[0], rest = ref[1];\n        return this.trees((function(_this) {\n          return function(err, _trees) {\n            var i, len, tree;\n            for (i = 0, len = _trees.length; i < len; i++) {\n              tree = _trees[i];\n              if (tree.name === dir) {\n                return tree.find(rest, callback);\n              }\n            }\n            return callback(null, null);\n          };\n        })(this));\n      } else {\n        return this.contents(function(err, children) {\n          var child, i, len;\n          if (err) {\n            return callback(err);\n          }\n          for (i = 0, len = children.length; i < len; i++) {\n            child = children[i];\n            if (child.name === file) {\n              return callback(null, child);\n            }\n          }\n          return callback(null, null);\n        });\n      }\n    };\n\n    Tree.prototype.content_from_string = function(line) {\n      var id, mode, name, ref, type;\n      ref = line.split(/[\\t ]+/, 4), mode = ref[0], type = ref[1], id = ref[2], name = ref[3];\n      switch (type) {\n        case \"tree\":\n          return new Tree(this.repo, {\n            id: id,\n            name: name,\n            mode: mode\n          });\n        case \"blob\":\n          return new Blob(this.repo, {\n            id: id,\n            name: name,\n            mode: mode\n          });\n        case \"link\":\n          return new Blob(this.repo, {\n            id: id,\n            name: name,\n            mode: mode\n          });\n        case \"commit\":\n          return new Submodule(this.repo, {\n            id: id,\n            name: name,\n            mode: mode\n          });\n        default:\n          throw new Error(\"Invalid object type: '\" + type + \"'\");\n      }\n    };\n\n    Tree.prototype.toString = function() {\n      return \"#<Tree '\" + this.id + \"'>\";\n    };\n\n    return Tree;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/blob.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var Blob, path;\n\n  path = require('path');\n\n  module.exports = Blob = (function() {\n    function Blob(repo, attrs) {\n      this.repo = repo;\n      this.id = attrs.id, this.name = attrs.name, this.mode = attrs.mode;\n    }\n\n    Blob.prototype.data = function(callback) {\n      return this.repo.git(\"cat-file\", {\n        p: true\n      }, this.id, function(err, stdout, stderr) {\n        return callback(err, stdout);\n      }, 'binary');\n    };\n\n    Blob.prototype.dataStream = function() {\n      var streams;\n      streams = this.repo.git.streamCmd(\"cat-file\", {\n        p: true\n      }, [this.id]);\n      return streams;\n    };\n\n    Blob.prototype.toString = function() {\n      return \"#<Blob '\" + this.id + \"'>\";\n    };\n\n    return Blob;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/submodule.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var Submodule;\n\n  module.exports = Submodule = (function() {\n    function Submodule(repo1, options) {\n      this.repo = repo1;\n      this.id = options.id, this.name = options.name, this.mode = options.mode;\n    }\n\n    Submodule.prototype.url = function(treeish, callback) {\n      var ref;\n      if (!callback) {\n        ref = [callback, treeish], treeish = ref[0], callback = ref[1];\n      }\n      if (treeish == null) {\n        treeish = \"master\";\n      }\n      return Submodule.config(this.repo, treeish, (function(_this) {\n        return function(err, config) {\n          return callback(err, config != null ? config[_this.name].url : void 0);\n        };\n      })(this));\n    };\n\n    Submodule.config = function(repo, treeish, callback) {\n      return repo.tree(treeish).find(\".gitmodules\", function(err, blob) {\n        if (err) {\n          return callback(err);\n        }\n        return blob.data(function(err, data) {\n          var conf, current, line, lines, match;\n          if (err) {\n            return callback(err);\n          }\n          conf = {};\n          lines = data.split(\"\\n\");\n          current = null;\n          while (lines.length) {\n            line = lines.shift();\n            if (match = /^\\[submodule \"(.+)\"\\]$/.exec(line)) {\n              current = match[1];\n              conf[current] = {};\n            } else if (match = /^\\s+([^\\s]+)\\s+[=]\\s+(.+)$/.exec(line)) {\n              conf[current][match[1]] = match[2];\n            }\n          }\n          return callback(null, conf);\n        });\n      });\n    };\n\n    return Submodule;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/config.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var C, Config;\n\n  module.exports = C = function(repo, callback) {\n    return repo.git(\"config\", {\n      list: true\n    }, function(err, stdout, stderr) {\n      var config;\n      config = new Config(repo);\n      config.parse(stdout);\n      return callback(err, config);\n    });\n  };\n\n  C.Config = Config = (function() {\n    function Config(repo1) {\n      this.repo = repo1;\n    }\n\n    Config.prototype.parse = function(text) {\n      var i, key, len, line, ref, ref1, results, value;\n      this.items = {};\n      ref = text.split(\"\\n\");\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        line = ref[i];\n        if (line.length === 0) {\n          continue;\n        }\n        ref1 = line.split('='), key = ref1[0], value = ref1[1];\n        results.push(this.items[key] = value);\n      }\n      return results;\n    };\n\n    return Config;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/diff.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var Blob, Diff, _;\n\n  _ = require('underscore');\n\n  Blob = require('./blob');\n\n  module.exports = Diff = (function() {\n    function Diff(repo1, a_path1, b_path1, a_blob, b_blob, a_mode1, b_mode1, new_file1, deleted_file1, diff1, renamed_file1, similarity_index) {\n      this.repo = repo1;\n      this.a_path = a_path1;\n      this.b_path = b_path1;\n      this.a_mode = a_mode1;\n      this.b_mode = b_mode1;\n      this.new_file = new_file1;\n      this.deleted_file = deleted_file1;\n      this.diff = diff1;\n      this.renamed_file = renamed_file1 != null ? renamed_file1 : false;\n      this.similarity_index = similarity_index != null ? similarity_index : 0;\n      if (a_blob !== null) {\n        this.a_blob = new Blob(this.repo, {\n          id: a_blob\n        });\n        this.a_sha = a_blob;\n      }\n      if (b_blob !== null) {\n        this.b_blob = new Blob(this.repo, {\n          id: b_blob\n        });\n        this.b_sha = b_blob;\n      }\n    }\n\n    Diff.prototype.toJSON = function() {\n      return {\n        a_path: this.a_path,\n        b_path: this.b_path,\n        a_mode: this.a_mode,\n        b_mode: this.b_mode,\n        new_file: this.new_file,\n        deleted_file: this.deleted_file,\n        diff: this.diff,\n        renamed_file: this.renamed_file,\n        similarity_index: this.similarity_index\n      };\n    };\n\n    Diff.parse = function(repo, text) {\n      var a_blob, a_mode, a_path, b_blob, b_mode, b_path, deleted_file, diff, diff_lines, diffs, lines, m, new_file, ref, ref1, ref2, ref3, ref4, ref5, renamed_file, sim_index;\n      lines = text.split(\"\\n\");\n      diffs = [];\n      while (lines.length && lines[0]) {\n        ref = /^diff\\s--git\\s\"?a\\/(.+?)\"?\\s\"?b\\/(.+)\"?$/.exec(lines.shift()), m = ref[0], a_path = ref[1], b_path = ref[2];\n        if (/^old mode/.test(lines[0])) {\n          ref1 = /^old mode (\\d+)/.exec(lines.shift()), m = ref1[0], a_mode = ref1[1];\n          ref2 = /^new mode (\\d+)/.exec(lines.shift()), m = ref2[0], b_mode = ref2[1];\n        }\n        if (!lines.length || /^diff --git/.test(lines[0])) {\n          diffs.push(new Diff(repo, a_path, b_path, null, null, a_mode, b_mode, false, false, null));\n          continue;\n        }\n        sim_index = 0;\n        new_file = false;\n        deleted_file = false;\n        renamed_file = false;\n        if (/^new file/.test(lines[0])) {\n          ref3 = /^new file mode (.+)$/.exec(lines.shift()), m = ref3[0], b_mode = ref3[1];\n          a_mode = null;\n          new_file = true;\n        } else if (/^deleted file/.test(lines[0])) {\n          ref4 = /^deleted file mode (.+)$/.exec(lines.shift()), m = ref4[0], a_mode = ref4[1];\n          b_mode = null;\n          deleted_file = true;\n        } else if (m = /^similarity index (\\d+)\\%/.exec(lines[0])) {\n          sim_index = m[1].to_i;\n          renamed_file = true;\n          lines.shift();\n          lines.shift();\n        }\n        ref5 = /^index\\s([0-9A-Fa-f]+)\\.\\.([0-9A-Fa-f]+)\\s?(.+)?$/.exec(lines.shift()), m = ref5[0], a_blob = ref5[1], b_blob = ref5[2], b_mode = ref5[3];\n        if (b_mode) {\n          b_mode = b_mode.trim();\n        }\n        diff_lines = [];\n        while (lines[0] && !/^diff/.test(lines[0])) {\n          diff_lines.push(lines.shift());\n        }\n        diff = diff_lines.join(\"\\n\");\n        diffs.push(new Diff(repo, a_path, b_path, a_blob, b_blob, a_mode, b_mode, new_file, deleted_file, diff, renamed_file, sim_index));\n      }\n      return diffs;\n    };\n\n    Diff.parse_raw = function(repo, text) {\n      var a_mode, a_path, a_sha, b_mode, b_path, b_sha, deleted_file, diffs, i, len, line, lines, new_file, ref, renamed_file, status;\n      lines = _.compact(text.split(\"\\n\"));\n      diffs = [];\n      for (i = 0, len = lines.length; i < len; i++) {\n        line = lines[i];\n        line = line.slice(1);\n        line = line.replace(/\\.\\.\\./g, '');\n        ref = line.split(/\\s/), a_mode = ref[0], b_mode = ref[1], a_sha = ref[2], b_sha = ref[3], status = ref[4], a_path = ref[5], b_path = ref[6];\n        if (!b_path) {\n          b_path = a_path;\n        }\n        new_file = status === 'M';\n        deleted_file = status === 'D';\n        renamed_file = status === 'R';\n        diffs.push(new Diff(repo, a_path, b_path, a_sha, b_sha, a_mode, b_mode, new_file, deleted_file, null, renamed_file, null));\n      }\n      return diffs;\n    };\n\n    return Diff;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/tag.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var Actor, Commit, Ref, Tag, _,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  _ = require('underscore');\n\n  Commit = require('./commit');\n\n  Actor = require('./actor');\n\n  Ref = require('./ref').Ref;\n\n  module.exports = Tag = (function(superClass) {\n    extend(Tag, superClass);\n\n    function Tag() {\n      return Tag.__super__.constructor.apply(this, arguments);\n    }\n\n    Tag.find_all = function(repo, callback) {\n      return Ref.find_all(repo, \"tag\", Tag, callback);\n    };\n\n    Tag.prototype.message = function(callback) {\n      return this.lazy(function(err, data) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, data.message);\n      });\n    };\n\n    Tag.prototype.tagger = function(callback) {\n      return this.lazy(function(err, data) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, data.tagger);\n      });\n    };\n\n    Tag.prototype.tag_date = function(callback) {\n      return this.lazy(function(err, data) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, data.tag_date);\n      });\n    };\n\n    Tag.prototype.lazy = function(callback) {\n      if (this._lazy_data) {\n        return callback(null, this._lazy_data);\n      }\n      return this.repo.git(\"cat-file\", {}, [\"tag\", this.name], (function(_this) {\n        return function(err, stdout, stderr) {\n          var author, author_line, data, epoch, line, lines, m, message, ref;\n          if (err) {\n            return callback(err);\n          }\n          lines = stdout.split(\"\\n\");\n          data = {};\n          lines.shift();\n          lines.shift();\n          lines.shift();\n          author_line = lines.shift();\n          ref = /^.+? (.*) (\\d+) .*$/.exec(author_line), m = ref[0], author = ref[1], epoch = ref[2];\n          data.tagger = Actor.from_string(author);\n          data.tag_date = new Date(epoch);\n          lines.shift();\n          message = [];\n          while (line = lines.shift()) {\n            message.push(line);\n          }\n          data.message = message.join(\"\\n\");\n          return callback(null, (_this._lazy_data = data));\n        };\n      })(this));\n    };\n\n    return Tag;\n\n  })(Ref);\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/ref.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var Commit, Head, Ref, fs,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  fs = require('fs');\n\n  Commit = require('./commit');\n\n  exports.Ref = Ref = (function() {\n    function Ref(name1, commit1) {\n      this.name = name1;\n      this.commit = commit1;\n      this.repo = this.commit.repo;\n    }\n\n    Ref.prototype.toString = function() {\n      return \"#<Ref '\" + this.name + \"'>\";\n    };\n\n    Ref.find_all = function(repo, type, RefClass, callback) {\n      return repo.git.refs(type, {}, function(err, text) {\n        var id, ids, j, len, name, names, ref, ref1, ref2;\n        if (err) {\n          return callback(err);\n        }\n        names = [];\n        ids = [];\n        ref1 = text.split(\"\\n\");\n        for (j = 0, len = ref1.length; j < len; j++) {\n          ref = ref1[j];\n          if (!ref) {\n            continue;\n          }\n          ref2 = ref.split(' '), name = ref2[0], id = ref2[1];\n          names.push(name);\n          ids.push(id);\n        }\n        return Commit.find_commits(repo, ids, function(err, commits) {\n          var i, k, len1, refs;\n          if (err) {\n            return callback(err);\n          }\n          refs = [];\n          for (i = k = 0, len1 = names.length; k < len1; i = ++k) {\n            name = names[i];\n            refs.push(new RefClass(name, commits[i]));\n          }\n          return callback(null, refs);\n        });\n      });\n    };\n\n    return Ref;\n\n  })();\n\n  exports.Head = Head = (function(superClass) {\n    extend(Head, superClass);\n\n    function Head() {\n      return Head.__super__.constructor.apply(this, arguments);\n    }\n\n    Head.find_all = function(repo, callback) {\n      return Ref.find_all(repo, \"head\", Head, callback);\n    };\n\n    Head.current = function(repo, callback) {\n      return fs.readFile(repo.dot_git + \"/HEAD\", function(err, data) {\n        var branch, m, ref;\n        if (err) {\n          return callback(err);\n        }\n        ref = /ref: refs\\/heads\\/([^\\s]+)/.exec(data);\n        if (!ref) {\n          return callback(new Error(\"Current branch is not a valid branch.\"));\n        }\n        m = ref[0], branch = ref[1];\n        return fs.readFile(repo.dot_git + \"/refs/heads/\" + branch, function(err, id) {\n          return Commit.find(repo, id, function(err, commit) {\n            if (err) {\n              return callback(err);\n            }\n            return callback(null, new Head(branch, commit));\n          });\n        });\n      });\n    };\n\n    return Head;\n\n  })(Ref);\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gift/node_modules/gift/lib/status.js":"// Generated by CoffeeScript 1.9.1\n(function() {\n  var S, Status;\n\n  module.exports = S = function(repo, options, callback) {\n    return repo.git(\"status --porcelain\", options, function(err, stdout, stderr) {\n      var status;\n      status = new Status(repo);\n      status.parse(stdout);\n      return callback(err, status);\n    });\n  };\n\n  S.Status = Status = (function() {\n    function Status(repo1) {\n      this.repo = repo1;\n    }\n\n    Status.prototype.parse = function(text) {\n      var file, i, len, line, ref, results, type;\n      this.files = {};\n      this.clean = text.length === 0;\n      ref = text.split(\"\\n\");\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        line = ref[i];\n        if (line.length === 0) {\n          continue;\n        }\n        file = line.substr(3);\n        type = line.substr(0, 2);\n        this.files[file] = {\n          staged: line[0] !== \" \" && line[0] !== \"?\",\n          tracked: line[0] !== \"?\"\n        };\n        if (type !== \"??\") {\n          results.push(this.files[file].type = type.trim());\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n\n    return Status;\n\n  })();\n\n}).call(this);\n"}